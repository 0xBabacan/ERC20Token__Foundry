// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

import {DeployOurToken} from "../script/DeployOurToken.s.sol";
import {OurToken} from "../src/OurToken.sol";
import {Test, console} from "forge-std/Test.sol";

interface MintableToken {
    function mint(address, uint256) external;
}

contract OurTokenTest is Test {
    uint256 STARTING_BALLANCE = 100 ether;

    OurToken public ourToken;
    DeployOurToken public deployer;
    address public deployerAddress;
    address bob;
    address alice;

    function setUp() public {
        deployer = new DeployOurToken();
        ourToken = deployer.run();

        bob = makeAddr("bob");
        alice = makeAddr("alice");

        //deployerAddress = vm.addr(deployer.deployerKey());
        vm.prank(msg.sender);
        ourToken.transfer(bob, STARTING_BALLANCE);
    }

    function testBobBalance() public {
    	assertEq(STARTING_BALLANCE, ourToken.balanceOf(bob));
    }

    function testAllowancesWorks() public {
    	uint256 initialAllowance = 1000;
    	// Bob approves Alice to spend tokens on his behalf
    	// Caution! Alice now can spend Bob's tokens without asking him
    	vm.prank(bob);
    	ourToken.approve(alice, initialAllowance);

    	uint256 transferAmount = 500;

    	// Alice sends Bob's tokens to herself
    	vm.prank(alice);
    	ourToken.transferFrom(bob, alice, transferAmount);

    	assertEq(ourToken.balanceOf(alice), transferAmount);
    	assertEq(ourToken.balanceOf(bob), STARTING_BALLANCE - transferAmount);
    }

    /* Tests generated by chatGPT */
    function testTransfer() public {
        uint256 amount = 100;
        vm.prank(bob);
        ourToken.transfer(alice, amount);
        assertEq(ourToken.balanceOf(alice), amount);
    }

    function testBalanceAfterTransfer() public {
        uint256 amount = 100;
        uint256 initialBalance = ourToken.balanceOf(bob);
        vm.prank(bob);
        ourToken.transfer(alice, amount);
        assertEq(ourToken.balanceOf(bob), initialBalance - amount);
    }

    function testDecimals() public {
        assertEq(ourToken.decimals(), 18); // Assuming 18 decimals
    }

    function testUsersCantMint() public {
        vm.expectRevert();
        MintableToken(address(ourToken)).mint(address(this), 1);
    }
}